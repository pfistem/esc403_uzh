metadata <- read.csv("~/Git/esc403_skincancerclassifier/www/data/metadata.csv")
View(metadata)
library(ggplot2)
data <- read.csv("~/Git/esc403_skincancerclassifier/www/data/metadata.csv")
dat$dx <- as.factor(dat$dx)
dat <- read.csv("~/Git/esc403_skincancerclassifier/www/data/metadata.csv")
dat$dx <- as.factor(dat$dx)
dat$dx <- as.factor(dat$dx)
dat$dx_type <- as.factor(dat$dx_type)
dat$sex <- as.factor(dat$sex)
dat$localization <- as.factor(dat$localization)
dat$dataset <- as.factor(dat$dataset)
str(dat)
library(GGally)
library(dplyr)
ggpairs(select(dat, dx, dx_type, age, sex))
ggpairs(select(dat, dx, dx_type, age, sex))+theme_bw()
str(dat)
table(dat$sex)
ggplot(data=dat, aes(x=dx, y=age)) +
geom_boxplot()	+
geom_point(size = 4, colour = 'lightgrey', alpha = 0.5) +
xlab("Grazing treatment") +
ylab("Fruit Production") +
theme_bw()
ggplot(data=dat, aes(x=dx, y=age, color=dx)) +
geom_boxplot()+
xlab("Grazing treatment") +
ylab("Fruit Production") +
theme_bw()
ggplot(data=dat, aes(x=dx, y=age, color=dx, fill=dx)) +
geom_boxplot()+
xlab("Grazing treatment") +
ylab("Fruit Production") +
theme_bw()
ggplot(data=dat, aes(x=dx, y=age, color=dx)) +
geom_boxplot()+
xlab("Grazing treatment") +
ylab("Fruit Production") +
theme_bw()
ggplot(data=dat, aes(x=dx, y=sex, color=dx)) +
geom_boxplot()+
xlab("Grazing treatment") +
ylab("Fruit Production") +
theme_bw()
ggplot(data=dat, aes(x = dx)) +
geom_histogram(binwidth = 15) +
ggplot(data=dat, aes(x = dx)) +
geom_histogram(binwidth = 15)
ggplot(data=dat, aes(x = dx)) +
geom_histogram()
ggplot(data=dat, aes(x = dx)) +
geom_hist()
ggplot(data=dat, aes(x = dx_type)) +
geom_hist()
ggplot(data=dat, aes(x = dx_type)) +
geom_histogram(color="black", fill="white")
ggplot(data=dat, aes(x = dx_type)) +
geom_histogram(stat = "count")
ggplot(data=dat, aes(x = dx)) +
geom_histogram(stat = "count")
ggplot(data=dat, aes(x = dx)) +
geom_histogram(stat = "count", aes(fill=dx))
ggplot(data=dat, aes(x=dx, y=age, color=dx)) +
geom_boxplot()+
xlab("Grazing treatment") +
ylab("Fruit Production") +
theme_bw()
ggpairs(select(dat, dx, dx_type, age, sex))+theme_bw()
ggplot(data=dat, aes(x = dx)) +
geom_histogram(stat = "count", aes(fill=dx))+
theme_bw()
# count the number of observations per group
counts <- table(dat$dx)
# order the levels by the counts, in decreasing order
ordered_levels <- names(counts)[order(counts, decreasing = TRUE)]
# use the ordered levels to relevel the factor variable
dat$dx <- factor(dat$dx, levels = ordered_levels)
# check the new order of the levels
levels(dat$dx)
ggplot(data=dat, aes(x=dx, y=age, color=dx)) +
geom_boxplot()+
xlab("Grazing treatment") +
ylab("Fruit Production") +
theme_bw()
ggplot(data=dat, aes(x = dx)) +
geom_histogram(stat = "count", aes(fill=dx))+
theme_bw()
ggplot(data=dat, aes(x = dx)) +
geom_histogram(stat = "count", aes(fill=dx))+
theme_bw()+
stat_summary(aes(label = table(dat$dx)), , geom = "text", size = 3,
vjust = -1)
ggplot(data=dat, aes(x = dx)) +
geom_histogram(stat = "count", aes(fill=dx))+
theme_bw()+
stat_summary(aes(label = table(dx)), , geom = "text", size = 3,
vjust = -1)
names(dat$dx)
names(table(dat$dx)
)
ggplot(data=dat, aes(x = dx)) +
geom_histogram(stat = "count", aes(fill=dx))+
theme_bw()+
annotate("text",
x = 1:7,
y = +Inf,
label = names(table(dat$dx)),
col = "white",
vjust = -1)
ggplot(data=dat, aes(x = dx)) +
geom_histogram(stat = "count", aes(fill=dx))+
theme_bw()+
annotate("text",
x = 1:7,
y = +Inf,
label = names(table(dat$dx)),
col = "white",
vjust = -1)
names(table(dat$dx))
ggplot(data=dat, aes(x=dx, y=age, color=dx)) +
geom_boxplot()+
xlab("Grazing treatment") +
ylab("Fruit Production") +
theme_bw()
table(dat$dx_type)
library(ggplot2)
dat <- read.csv("~/Git/esc403_skincancerclassifier/www/data/metadata.csv")
dat$dx <- as.factor(dat$dx)
dat$dx_type <- as.factor(dat$dx_type)
dat$sex <- as.factor(dat$sex)
dat$localization <- as.factor(dat$localization)
dat$dataset <- as.factor(dat$dataset)
str(dat)
table(dat$sex)
table(dat$dx_type)
library(dplyr)
library(GGally)
ggpairs(select(dat, dx, dx_type, age, sex))+theme_bw()
# use the ordered levels to relevel the factor variable
counts <- table(dat$dx)
ordered_levels <- names(counts)[order(counts, decreasing = TRUE)]
dat$dx <- factor(dat$dx, levels = ordered_levels)
ggplot(data=dat, aes(x=dx, y=age, color=dx)) +
geom_boxplot()+
xlab("Grazing treatment") +
ylab("Fruit Production") +
theme_bw()
ggplot(data=dat, aes(x = dx)) +
geom_histogram(stat = "count", aes(fill=dx))+
theme_bw()
ggplot(data=dat, aes(x=dx, y=age, color=dx)) +
geom_boxplot()+
xlab("") +
ylab("") +
theme_bw()
ggplot(data=dat, aes(x = dx)) +
geom_histogram(stat = "count", aes(fill=dx))+
theme_bw()
ggpairs(select(dat, dx, dx_type, age, sex))+theme_bw()
ggplot(data=dat, aes(x=dx, y=age, color=dx)) +
geom_boxplot()+
xlab("") +
ylab("") +
theme_bw()
ggplot(data=dat, aes(x=dx, y=age, color=dx)) +
geom_boxplot()+
xlab("") +
ylab("") +
theme_bw()
ggplot(data=dat, aes(x = dx)) +
geom_histogram(stat = "count", aes(fill=dx))+
theme_bw()
table_one <- CreateTableOne(
data = dat, addOverall = TRUE, test = FALSE)
library(tableone)
table_one <- CreateTableOne(
data = dat, addOverall = TRUE, test = FALSE)
table_one <- print(table_before_intervention, missing=TRUE)
table_one <- print(table_one, missing=TRUE)
table_one <- CreateTableOne(data = dat, vars=c("dx", "dx_type","age", "sex",
"localization", "dataset"),
addOverall = TRUE, test = FALSE)
table_one <- print(table_one, missing=TRUE)
kableone(table_one, booktabs = TRUE, format = "latex")
kableone(table_one, booktabs = F, format = "latex")
table_one <- CreateTableOne(data = dat, vars=c("dx", "dx_type"),
addOverall = TRUE, test = FALSE)
table_one <- print(table_one, missing=TRUE)
kableone(table_one, booktabs = F, format = "latex")
table_one <- CreateTableOne(data = dat, vars=c("age", "sex","localization"),
addOverall = TRUE, test = FALSE)
table_one <- print(table_one, missing=TRUE)
kableone(table_one, booktabs = F, format = "latex")
kableone(table_one, booktabs = T, format = "latex")
table_one <- CreateTableOne(data = dat, vars=c("dx", "dx_type"),
addOverall = TRUE, test = FALSE)
table_one <- print(table_one, missing=TRUE)
kableone(table_one, booktabs = T, format = "latex")
